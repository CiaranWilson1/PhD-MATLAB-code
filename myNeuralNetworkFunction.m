function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 18-Nov-2017 16:13:36.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 1xQ matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 7xQ matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 0;
x1_step1.gain = 0.01;
x1_step1.ymin = -1;

% Layer 1
b1 = [14;10.888888888888889;-7.7777777777777786;4.666666666666667;-1.555555555555411;-1.5555555556281822;-4.6666666696880199;-7.7777765192935266;-10.891657542425433;13.911097366657838];
IW1_1 = [-14;-14;14;-14;13.999999999999854;-13.999999999927374;-13.999999996978646;-14.000001258484252;-13.997231346463455;14.088902633342155];

% Layer 2
b2 = [-0.13700166976756123;0.64843857498997237;0.61046061040491684;-0.47285901310892237;-0.50094334366499316;-0.32314841473243416;-0.53891647243686081];
LW2_1 = [-0.077905180833265253 -0.43369828806052219 -0.66337678378411002 -0.49882079332397561 -0.49873905922293893 0.40507372483887855 -0.33546693899123609 -0.50034329276828937 -0.3646569874158847 0.28863626038738333;0.50320880666018142 -0.44457821363079864 0.40194381684304475 -0.37410608642490778 0.48061277856347756 -0.56570472172189523 0.49750618125018803 0.65472234533518714 0.29545736323863536 -0.24278123467946311;-0.27371920220762536 -0.083796491547763363 0.45320317809837152 0.99687533798719685 0.47589787912906928 -0.47758119534772414 0.029012805733190816 0.99682263344263788 0.047341331825692778 0.62316091656495431;0.81771863686880808 -0.64170572890464816 -0.12992821648886088 -0.10886592465247238 0.038760788731917295 -0.5503635396530363 0.60104201382717604 -0.72609294059155216 0.12823135233940319 0.065651177598909705;0.14067425874615747 -0.73562042765914093 0.081941281024012158 -0.62005343239630895 -0.77700490988171977 0.19479494569214031 -0.72552597254128481 0.75533675269257783 -0.081483083565933534 -0.29854579284623339;-0.56309034998307328 -0.78509006043780993 -0.059566068589630261 -0.45717082059138614 -0.26544506148759872 0.19844965955792315 0.10855575910717119 0.28643233336314972 0.37131016136369299 0.87800312399977365;0.026606286874128877 -0.16535865469123881 0.80000048569530169 -0.8069837425232006 -0.29379006469588004 0.29559913341263228 -0.63287048138711499 -0.026309528898325229 0.58976961617414492 0.75188562298596762];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [10.0991228911769;12.3562046681741;0.0693363231155861;44.0811831689315;15.5102933588812;1.40156119164842;1164.60463710628];
y1_step1.xoffset = [0;-0.110064;-19.606;-0.0444157;8.43738e-05;-1.50362e-07;-0.000415071];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
